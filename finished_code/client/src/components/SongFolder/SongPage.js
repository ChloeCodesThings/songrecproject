import React, { useEffect, useState } from 'react';
import SongList from './SongList'
import PlaylistLink from './PlaylistLink'


const ListSong = (props) => {

  console.log('list song beginning')

  let valence = props.emotions.happiness+props.emotions.surprise-props.emotions.anger-props.emotions.fear
    -props.emotions.contempt-props.emotions.disgust;

  if(props.emotions.neutral > Math.abs(valence)){
    valence = 0.5
  }

  const [tracks, setTracks] = useState([]);
  const [value, setValue] = useState('');
  const [link, setLink] = useState('');
  const [tracksUris, setTracksUris] = useState([]);
  
  useEffect(() => {
    console.log('inside use effect')
    async function getData(){
      const data = await getRecommendations();
      console.log(data);
      console.log('in use effect')
      setTracks(data);
    } 
    getData()  
    
  }, [])

  async function regenerateTracks(){
    const data = await getRecommendations();
      console.log(data);
      console.log('in use effect')
      setTracks(data);
  }

  async function getTop(type, limit){
    const time_range = "medium_term";
    const result = await fetch(`https://api.spotify.com/v1/me/top/${type}?time_range=${time_range}&limit=${limit}`, {
        method: 'GET',
        headers: { 'Authorization' : 'Bearer ' + props.token}
    });
    const data = await result.json();
    console.log(data.items); 
    return data.items;
  } 

  //GET RECOMMENDATIONS FUNCTION
  async function getRecommendations(){

    const numTracks = 3;
    const numArtists = 2;
  
    const topTracks = await getTop('tracks', numTracks)
    let seedTracks = "";
    for (let i = 0; i < numTracks; i++){
      seedTracks = seedTracks + topTracks[i].id + "%2C";
    }
    seedTracks = seedTracks.substring(0, seedTracks.length-3); 
    
    
    const topArtists = await getTop('artists', numArtists)
    let seedArtists = '';
    for (let i = 0; i < numArtists; i++){
      seedArtists = seedArtists + topArtists[i].id + "%2C";
    } 

    let minValence = 0;
    let maxValence = 1;

    const limit = 10;

    if (valence < .33){
        maxValence = .3;
    }
    else if (valence > .66){
        minValence = .66;
    }
    else{
        minValence = .4;
        maxValence = .65;
    }

    console.log("min: " + minValence);
    console.log("max: " + maxValence);

    
    const minPopularity = "70";

    const result = await fetch(`https://api.spotify.com/v1/recommendations?&limit=${limit}&seed_tracks=${seedTracks}&min_popularity=${minPopularity}&min_valence=${minValence}&max_valence=${maxValence}`, {
        method: 'GET',
        headers: { 'Authorization' : 'Bearer ' + props.token}
    });
    //console.log('before call');
    const data = await result.json();
    let recommendedTracksUri = [];
    for (let i = 0; i < data.tracks.length; i++){
      recommendedTracksUri.push(data.tracks[i].uri);
    }

    setTracksUris(recommendedTracksUri);

    return data.tracks;
  }

  const createPlaylist = async() => {
    console.log("am i here?")
    let id = props.id
    let params = {
      "name": "Better Song Recommendations",
      "description": "generated by better-song-rec.herokuapp.com",
      "public": false
    }
    const resp = await fetch(`https://api.spotify.com/v1/users/${id}/playlists`, {
      method: 'POST',
      headers: { 'Authorization' : 'Bearer ' + props.token, 'Content-Type': 'application/json'},
      body: JSON.stringify(params)
    });
    const data = await resp.json();
    setLink(data.external_urls.spotify)  
 
    addTracks(data.id);

    setValue("Go to playlist -->")
  }

  const addTracks = (id) => {

    let params = {
      "uris": tracksUris
    } 
    console.log(params)
  fetch(`https://api.spotify.com/v1/playlists/${id}/tracks`, {
    method: 'POST',
    headers: { 'Authorization' : 'Bearer ' + props.token, 'Content-Type': 'application/json'},
    body: JSON.stringify(params)
    }).then(console.log('tracksadded!'))
  }

  return (
    <div className='song-page'>
      <SongList recommendedTracks={tracks}/>
      <div className="song-buttons">
        <button className="green-btn" onClick={() => regenerateTracks()}>Regenerate Songs</button>
        <button className="green-btn" onClick={() => createPlaylist()}>Create playlist from these songs</button>
        <PlaylistLink link={link} value={value}/>
      </div>
    </div>
  )
}

export default ListSong;
